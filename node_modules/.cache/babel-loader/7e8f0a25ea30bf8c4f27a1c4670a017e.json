{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\K. C. Fike\\\\Desktop\\\\github\\\\productapp\\\\src\\\\graphql\\\\GraphQLTable.js\";\nimport React, { Component } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport * as queries from \"./queries\";\nimport { ProductTable } from \"../ProductTable\";\nimport * as mutations from \"./mutations\";\nimport { PRODUCTS, SUPPLIERS } from \"../store/dataTypes\";\nimport { SupplierTable } from \"../SupplierTable\";\nexport const GraphQLTable = dataType => {\n  var _temp;\n\n  const getAll = gql(queries[dataType].getAll.graphql);\n  const deleteItem = gql(mutations[dataType].delete.graphql);\n  return _temp = class extends Component {\n    constructor(props) {\n      super(props);\n\n      this.removeItemFromCache = (cache, mutationResult) => {\n        const deletedId = mutationResult.data[mutations[dataType].delete.name];\n        const data = cache.readQuery({\n          query: getAll\n        })[queries[dataType].getAll.name];\n        cache.writeQuery({\n          query: getAll,\n          data: {\n            [dataType]: data.filter(item => item.id !== deletedId)\n          }\n        });\n      };\n\n      this.editCallback = item => this.props.history.push(`/${dataType}/edit/${item.id}`);\n    }\n\n    getRefetchQueries() {\n      return dataType === PRODUCTS ? [{\n        query: gql(queries[SUPPLIERS].getAll.graphql)\n      }] : [];\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(Query, {\n        query: getAll,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 20\n        }\n      }, ({\n        loading,\n        data,\n        refetch\n      }) => {\n        if (loading) {\n          return /*#__PURE__*/React.createElement(\"h5\", {\n            className: \"bg-info text-white text-center m-2 p-2\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 32\n            }\n          }, \"Loading...\");\n        } else {\n          return /*#__PURE__*/React.createElement(Mutation, {\n            mutation: deleteItem,\n            update: this.removeItemFromCache,\n            refetchQueries: this.getRefetchQueries,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 32\n            }\n          }, doDelete => /*#__PURE__*/React.createElement(React.Fragment, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 34\n            }\n          }, dataType === PRODUCTS && /*#__PURE__*/React.createElement(ProductTable, {\n            products: data.products,\n            editCallback: this.editCallback,\n            deleteCallback: p => doDelete({\n              variables: {\n                id: p.id\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 41\n            }\n          }), dataType === SUPPLIERS && /*#__PURE__*/React.createElement(SupplierTable, {\n            suppliers: data.suppliers,\n            editCallback: this.editCallback,\n            deleteCallback: p => doDelete({\n              variables: {\n                id: p.id\n              }\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 41\n            }\n          }), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"text-center\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 37\n            }\n          }, /*#__PURE__*/React.createElement(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: () => refetch(),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 41\n            }\n          }, \"Reload Data\"))));\n        }\n      });\n    }\n\n  }, _temp;\n};","map":{"version":3,"sources":["C:/Users/K. C. Fike/Desktop/github/productapp/src/graphql/GraphQLTable.js"],"names":["React","Component","Query","Mutation","gql","queries","ProductTable","mutations","PRODUCTS","SUPPLIERS","SupplierTable","GraphQLTable","dataType","getAll","graphql","deleteItem","delete","constructor","props","removeItemFromCache","cache","mutationResult","deletedId","data","name","readQuery","query","writeQuery","filter","item","id","editCallback","history","push","getRefetchQueries","render","loading","refetch","doDelete","products","p","variables","suppliers"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport * as queries from \"./queries\";\nimport { ProductTable } from \"../ProductTable\";\nimport * as mutations from \"./mutations\";\nimport { PRODUCTS, SUPPLIERS } from \"../store/dataTypes\";\nimport { SupplierTable } from \"../SupplierTable\";\n\nexport const GraphQLTable = (dataType) => {\n\n    const getAll = gql(queries[dataType].getAll.graphql);\n    const deleteItem = gql(mutations[dataType].delete.graphql);\n\n    return class extends Component {\n\n        constructor(props) {\n            super(props);\n            this.editCallback = (item) => this.props.history\n                .push(`/${dataType}/edit/${item.id}`);\n        }\n        \n        removeItemFromCache = (cache, mutationResult) => {\n\n            const deletedId =  mutationResult.data[mutations[dataType].delete.name];\n            const data = \n                cache.readQuery({ query: getAll })[queries[dataType].getAll.name];\n            cache.writeQuery({\n                query: getAll, \n                data: { [dataType]: data.filter(item => item.id !== deletedId) }\n            });\n        }\n\n        getRefetchQueries() {\n            return dataType === PRODUCTS \n                ? [{query: gql(queries[SUPPLIERS].getAll.graphql)}] : []\n        }\n\n        render() {\n            return <Query query={ getAll }>\n                {({loading, data, refetch }) => {\n                    if (loading) {\n                        return <h5 \n                            className=\"bg-info text-white text-center m-2 p-2\">\n                                Loading...\n                        </h5>\n                    } else {\n                        return <Mutation mutation={ deleteItem } \n                                update={ this.removeItemFromCache }\n                                refetchQueries={ this.getRefetchQueries }>\n                            { doDelete => \n                                 <React.Fragment>\n                                     { dataType === PRODUCTS && \n                                        <ProductTable products={data.products} \n                                            editCallback= { this.editCallback }\n                                            deleteCallback={ (p) => \n                                                doDelete({variables: {id: p.id} }) }  \n                                        />\n                                    }\n                                    { dataType === SUPPLIERS && \n                                        <SupplierTable suppliers={data.suppliers}\n                                            editCallback= { this.editCallback }\n                                            deleteCallback={ (p) => \n                                                doDelete({variables: {id: p.id} }) }  \n                                        />                                        \n                                    }\n                                    <div className=\"text-center\">\n                                        <button className=\"btn btn-primary\" \n                                                onClick={ () => refetch() }>\n                                            Reload Data\n                                        </button>\n                                    </div>\n                                </React.Fragment>                            \n                        }\n                        </Mutation>                        \n                    }\n                }}\n            </Query>\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}