{"ast":null,"code":"import { connect } from \"react-redux\"; //import { startEditingProduct, startEditingSupplier } from \"./stateActions\";\n\nimport { deleteProduct, deleteSupplier } from \"./modelActionCreators\";\nimport { PRODUCTS, SUPPLIERS } from \"./dataTypes\";\nimport { withRouter } from \"react-router-dom\";\nexport const TableConnector = (dataType, presentationComponent) => {\n  const mapStateToProps = (storeData, ownProps) => {\n    if (dataType === PRODUCTS) {\n      return {\n        products: storeData.modelData[PRODUCTS]\n      };\n    } else {\n      return {\n        suppliers: storeData.modelData[SUPPLIERS].map(supp => ({ ...supp,\n          products: supp.products.map(id => storeData.modelData[PRODUCTS].find(p => p.id === Number(id)) || id).map(val => val.name || val)\n        }))\n      };\n    }\n  };\n\n  const mapDispatchToProps = (dispatch, ownProps) => {\n    if (dataType === PRODUCTS) {\n      return {\n        //editCallback: (...args) => dispatch(startEditingProduct(...args)),\n        deleteCallback: (...args) => dispatch(deleteProduct(...args))\n      };\n    } else {\n      return {\n        //editCallback: (...args) => dispatch(startEditingSupplier(...args)),\n        deleteCallback: (...args) => dispatch(deleteSupplier(...args))\n      };\n    }\n  };\n\n  const mergeProps = (dataProps, functionProps, ownProps) => {\n    let routedDispatchers = {\n      editCallback: target => {\n        ownProps.history.push(`/${dataType}/edit/${target.id}`);\n      },\n      deleteCallback: functionProps.deleteCallback\n    };\n    return Object.assign({}, dataProps, routedDispatchers, ownProps);\n  };\n\n  return withRouter(connect(mapStateToProps, mapDispatchToProps, mergeProps)(presentationComponent));\n};","map":{"version":3,"sources":["C:/Users/K. C. Fike/Desktop/github/productapp/src/store/TableConnector.js"],"names":["connect","deleteProduct","deleteSupplier","PRODUCTS","SUPPLIERS","withRouter","TableConnector","dataType","presentationComponent","mapStateToProps","storeData","ownProps","products","modelData","suppliers","map","supp","id","find","p","Number","val","name","mapDispatchToProps","dispatch","deleteCallback","args","mergeProps","dataProps","functionProps","routedDispatchers","editCallback","target","history","push","Object","assign"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,uBAA9C;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,aAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,qBAAX,KAAqC;AAE/D,QAAMC,eAAe,GAAG,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AAC7C,QAAIJ,QAAQ,KAAKJ,QAAjB,EAA2B;AACvB,aAAO;AAAES,QAAAA,QAAQ,EAAEF,SAAS,CAACG,SAAV,CAAoBV,QAApB;AAAZ,OAAP;AACH,KAFD,MAEO;AACH,aAAO;AACHW,QAAAA,SAAS,EAAEJ,SAAS,CAACG,SAAV,CAAoBT,SAApB,EAA+BW,GAA/B,CAAmCC,IAAI,KAAK,EACnD,GAAGA,IADgD;AAEnDJ,UAAAA,QAAQ,EAAEI,IAAI,CAACJ,QAAL,CAAcG,GAAd,CAAkBE,EAAE,IAC1BP,SAAS,CAACG,SAAV,CAAoBV,QAApB,EACKe,IADL,CACUC,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASG,MAAM,CAACH,EAAD,CAD9B,KACuCA,EAFjC,EAGDF,GAHC,CAGGM,GAAG,IAAIA,GAAG,CAACC,IAAJ,IAAYD,GAHtB;AAFyC,SAAL,CAAvC;AADR,OAAP;AASH;AACJ,GAdD;;AAgBA,QAAME,kBAAkB,GAAG,CAACC,QAAD,EAAWb,QAAX,KAAwB;AAC/C,QAAIJ,QAAQ,KAAKJ,QAAjB,EAA2B;AACvB,aAAO;AACH;AACAsB,QAAAA,cAAc,EAAE,CAAC,GAAGC,IAAJ,KAAaF,QAAQ,CAACvB,aAAa,CAAC,GAAGyB,IAAJ,CAAd;AAFlC,OAAP;AAIH,KALD,MAKO;AACH,aAAO;AACH;AACAD,QAAAA,cAAc,EAAE,CAAC,GAAGC,IAAJ,KAAaF,QAAQ,CAACtB,cAAc,CAAC,GAAGwB,IAAJ,CAAf;AAFlC,OAAP;AAIH;AACJ,GAZD;;AAcA,QAAMC,UAAU,GAAG,CAACC,SAAD,EAAYC,aAAZ,EAA2BlB,QAA3B,KAAwC;AACvD,QAAImB,iBAAiB,GAAG;AACpBC,MAAAA,YAAY,EAAGC,MAAD,IAAY;AACtBrB,QAAAA,QAAQ,CAACsB,OAAT,CAAiBC,IAAjB,CAAuB,IAAG3B,QAAS,SAAQyB,MAAM,CAACf,EAAG,EAArD;AACH,OAHmB;AAIpBQ,MAAAA,cAAc,EAAEI,aAAa,CAACJ;AAJV,KAAxB;AAMA,WAAOU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,SAAlB,EAA6BE,iBAA7B,EAAgDnB,QAAhD,CAAP;AACH,GARD;;AAUA,SAAON,UAAU,CAACL,OAAO,CAACS,eAAD,EACrBc,kBADqB,EACDI,UADC,CAAP,CACkBnB,qBADlB,CAAD,CAAjB;AAEH,CA5CM","sourcesContent":["import { connect } from \"react-redux\";\n//import { startEditingProduct, startEditingSupplier } from \"./stateActions\";\nimport { deleteProduct, deleteSupplier } from \"./modelActionCreators\";\nimport { PRODUCTS, SUPPLIERS } from \"./dataTypes\";\nimport { withRouter } from \"react-router-dom\";\n\nexport const TableConnector = (dataType, presentationComponent) => {\n\n    const mapStateToProps = (storeData, ownProps) => {\n        if (dataType === PRODUCTS) {\n            return { products: storeData.modelData[PRODUCTS] };\n        } else {\n            return { \n                suppliers: storeData.modelData[SUPPLIERS].map(supp => ({\n                    ...supp, \n                    products: supp.products.map(id => \n                        storeData.modelData[PRODUCTS]\n                            .find(p => p.id === Number(id)) || id)\n                            .map(val => val.name || val)\n                    }))\n            }\n        }\n    }\n    \n    const mapDispatchToProps = (dispatch, ownProps) => {\n        if (dataType === PRODUCTS) {\n            return {\n                //editCallback: (...args) => dispatch(startEditingProduct(...args)),\n                deleteCallback: (...args) => dispatch(deleteProduct(...args))\n            } \n        } else {\n            return {\n                //editCallback: (...args) => dispatch(startEditingSupplier(...args)),\n                deleteCallback: (...args) => dispatch(deleteSupplier(...args)) \n            }\n        }\n    }\n\n    const mergeProps = (dataProps, functionProps, ownProps) => {\n        let routedDispatchers = {\n            editCallback: (target) => {\n                ownProps.history.push(`/${dataType}/edit/${target.id}`);                \n            },\n            deleteCallback: functionProps.deleteCallback\n        }\n        return Object.assign({}, dataProps, routedDispatchers, ownProps);\n    }\n\n    return withRouter(connect(mapStateToProps, \n        mapDispatchToProps, mergeProps)(presentationComponent));\n}\n"]},"metadata":{},"sourceType":"module"}