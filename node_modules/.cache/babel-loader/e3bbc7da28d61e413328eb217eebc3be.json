{"ast":null,"code":"import { connect } from \"react-redux\"; //import { startEditingProduct, startEditingSupplier } from \"./stateActions\";\n\nimport { deleteProduct, deleteSupplier } from \"./modelActionCreators\";\nimport { PRODUCTS, SUPPLIERS } from \"./dataTypes\";\nimport { withRouter } from \"react-router-dom\";\nimport { getData } from \"../webservice/RestMiddleware\";\nimport { DataGetter } from \"../DataGetter\";\nexport const TableConnector = (dataType, presentationComponent) => {\n  const mapStateToProps = (storeData, ownProps) => {\n    if (dataType === PRODUCTS) {\n      return {\n        products: storeData.modelData[PRODUCTS]\n      };\n    } else {\n      return {\n        suppliers: storeData.modelData[SUPPLIERS].map(supp => ({ ...supp,\n          products: supp.products.map(id => storeData.modelData[PRODUCTS].find(p => p.id === Number(id)) || id).map(val => val.name || val)\n        }))\n      };\n    }\n  };\n\n  const mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n      getData: type => dispatch(getData(type)),\n      deleteCallback: dataType === PRODUCTS ? (...args) => dispatch(deleteProduct(...args)) : (...args) => dispatch(deleteSupplier(...args))\n    };\n  };\n\n  const mergeProps = (dataProps, functionProps, ownProps) => {\n    let routedDispatchers = {\n      editCallback: target => {\n        ownProps.history.push(`/${dataType}/edit/${target.id}`);\n      },\n      deleteCallback: functionProps.deleteCallback,\n      getData: functionProps.getData\n    };\n    return Object.assign({}, dataProps, routedDispatchers, ownProps);\n  };\n\n  return withRouter(connect(mapStateToProps, mapDispatchToProps, mergeProps)(DataGetter(dataType, presentationComponent)));\n};","map":{"version":3,"sources":["C:/Users/K. C. Fike/Desktop/github/productapp/src/store/TableConnector.js"],"names":["connect","deleteProduct","deleteSupplier","PRODUCTS","SUPPLIERS","withRouter","getData","DataGetter","TableConnector","dataType","presentationComponent","mapStateToProps","storeData","ownProps","products","modelData","suppliers","map","supp","id","find","p","Number","val","name","mapDispatchToProps","dispatch","type","deleteCallback","args","mergeProps","dataProps","functionProps","routedDispatchers","editCallback","target","history","push","Object","assign"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,uBAA9C;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,aAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,qBAAX,KAAqC;AAE/D,QAAMC,eAAe,GAAG,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AAC7C,QAAIJ,QAAQ,KAAKN,QAAjB,EAA2B;AACvB,aAAO;AAAEW,QAAAA,QAAQ,EAAEF,SAAS,CAACG,SAAV,CAAoBZ,QAApB;AAAZ,OAAP;AACH,KAFD,MAEO;AACH,aAAO;AACHa,QAAAA,SAAS,EAAEJ,SAAS,CAACG,SAAV,CAAoBX,SAApB,EAA+Ba,GAA/B,CAAmCC,IAAI,KAAK,EACnD,GAAGA,IADgD;AAEnDJ,UAAAA,QAAQ,EAAEI,IAAI,CAACJ,QAAL,CAAcG,GAAd,CAAkBE,EAAE,IAC1BP,SAAS,CAACG,SAAV,CAAoBZ,QAApB,EACKiB,IADL,CACUC,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASG,MAAM,CAACH,EAAD,CAD9B,KACuCA,EAFjC,EAGDF,GAHC,CAGGM,GAAG,IAAIA,GAAG,CAACC,IAAJ,IAAYD,GAHtB;AAFyC,SAAL,CAAvC;AADR,OAAP;AASH;AACJ,GAdD;;AAgBA,QAAME,kBAAkB,GAAG,CAACC,QAAD,EAAWb,QAAX,KAAwB;AAC/C,WAAO;AACHP,MAAAA,OAAO,EAAGqB,IAAD,IAAUD,QAAQ,CAACpB,OAAO,CAACqB,IAAD,CAAR,CADxB;AAEHC,MAAAA,cAAc,EAAEnB,QAAQ,KAAKN,QAAb,GACV,CAAC,GAAG0B,IAAJ,KAAaH,QAAQ,CAACzB,aAAa,CAAC,GAAG4B,IAAJ,CAAd,CADX,GAEV,CAAC,GAAGA,IAAJ,KAAaH,QAAQ,CAACxB,cAAc,CAAC,GAAG2B,IAAJ,CAAf;AAJxB,KAAP;AAMH,GAPD;;AASA,QAAMC,UAAU,GAAG,CAACC,SAAD,EAAYC,aAAZ,EAA2BnB,QAA3B,KAAwC;AACvD,QAAIoB,iBAAiB,GAAG;AACpBC,MAAAA,YAAY,EAAGC,MAAD,IAAY;AACtBtB,QAAAA,QAAQ,CAACuB,OAAT,CAAiBC,IAAjB,CAAuB,IAAG5B,QAAS,SAAQ0B,MAAM,CAAChB,EAAG,EAArD;AACH,OAHmB;AAIpBS,MAAAA,cAAc,EAAEI,aAAa,CAACJ,cAJV;AAKpBtB,MAAAA,OAAO,EAAE0B,aAAa,CAAC1B;AALH,KAAxB;AAQA,WAAOgC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,SAAlB,EAA6BE,iBAA7B,EAAgDpB,QAAhD,CAAP;AACH,GAVD;;AAYA,SAAOR,UAAU,CAACL,OAAO,CAACW,eAAD,EACrBc,kBADqB,EACDK,UADC,CAAP,CACkBvB,UAAU,CAACE,QAAD,EACtCC,qBADsC,CAD5B,CAAD,CAAjB;AAGH,CA1CM","sourcesContent":["import { connect } from \"react-redux\";\n//import { startEditingProduct, startEditingSupplier } from \"./stateActions\";\nimport { deleteProduct, deleteSupplier } from \"./modelActionCreators\";\nimport { PRODUCTS, SUPPLIERS } from \"./dataTypes\";\nimport { withRouter } from \"react-router-dom\";\nimport { getData } from \"../webservice/RestMiddleware\";\nimport { DataGetter } from \"../DataGetter\";\n\nexport const TableConnector = (dataType, presentationComponent) => {\n\n    const mapStateToProps = (storeData, ownProps) => {\n        if (dataType === PRODUCTS) {\n            return { products: storeData.modelData[PRODUCTS] };\n        } else {\n            return { \n                suppliers: storeData.modelData[SUPPLIERS].map(supp => ({\n                    ...supp, \n                    products: supp.products.map(id => \n                        storeData.modelData[PRODUCTS]\n                            .find(p => p.id === Number(id)) || id)\n                            .map(val => val.name || val)\n                    }))\n            }\n        }\n    }\n    \n    const mapDispatchToProps = (dispatch, ownProps) => {\n        return {\n            getData: (type) => dispatch(getData(type)),\n            deleteCallback: dataType === PRODUCTS \n                ? (...args) => dispatch(deleteProduct(...args))\n                : (...args) => dispatch(deleteSupplier(...args)) \n        }\n    }\n\n    const mergeProps = (dataProps, functionProps, ownProps) => {\n        let routedDispatchers = {\n            editCallback: (target) => {\n                ownProps.history.push(`/${dataType}/edit/${target.id}`);                \n            },\n            deleteCallback: functionProps.deleteCallback,\n            getData: functionProps.getData \n\n        }\n        return Object.assign({}, dataProps, routedDispatchers, ownProps);\n    }\n\n    return withRouter(connect(mapStateToProps, \n        mapDispatchToProps, mergeProps)(DataGetter(dataType, \n            presentationComponent)));\n}\n"]},"metadata":{},"sourceType":"module"}