{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Used to print values in error messages.\n */\n\n\nexport default function inspect(value) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value) {\n        if (typeof value.inspect === 'function') {\n          return value.inspect();\n        } else if (Array.isArray(value)) {\n          return '[' + value.map(inspect).join(', ') + ']';\n        }\n\n        var properties = Object.keys(value).map(function (k) {\n          return \"\".concat(k, \": \").concat(inspect(value[k]));\n        }).join(', ');\n        return properties ? '{ ' + properties + ' }' : '{}';\n      }\n\n      return String(value);\n\n    default:\n      return String(value);\n  }\n}","map":{"version":3,"sources":["C:/Users/K. C. Fike/Desktop/github/productapp/node_modules/graphql/jsutils/inspect.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","inspect","value","JSON","stringify","name","concat","Array","isArray","map","join","properties","Object","keys","k","String"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;AAE/V;;;;;;;;;AASA;;;;;AAGA,eAAe,SAASK,OAAT,CAAiBC,KAAjB,EAAwB;AACrC,UAAQP,OAAO,CAACO,KAAD,CAAf;AACE,SAAK,QAAL;AACE,aAAOC,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAP;;AAEF,SAAK,UAAL;AACE,aAAOA,KAAK,CAACG,IAAN,GAAa,aAAaC,MAAb,CAAoBJ,KAAK,CAACG,IAA1B,EAAgC,GAAhC,CAAb,GAAoD,YAA3D;;AAEF,SAAK,QAAL;AACE,UAAIH,KAAJ,EAAW;AACT,YAAI,OAAOA,KAAK,CAACD,OAAb,KAAyB,UAA7B,EAAyC;AACvC,iBAAOC,KAAK,CAACD,OAAN,EAAP;AACD,SAFD,MAEO,IAAIM,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAJ,EAA0B;AAC/B,iBAAO,MAAMA,KAAK,CAACO,GAAN,CAAUR,OAAV,EAAmBS,IAAnB,CAAwB,IAAxB,CAAN,GAAsC,GAA7C;AACD;;AAED,YAAIC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYX,KAAZ,EAAmBO,GAAnB,CAAuB,UAAUK,CAAV,EAAa;AACnD,iBAAO,GAAGR,MAAH,CAAUQ,CAAV,EAAa,IAAb,EAAmBR,MAAnB,CAA0BL,OAAO,CAACC,KAAK,CAACY,CAAD,CAAN,CAAjC,CAAP;AACD,SAFgB,EAEdJ,IAFc,CAET,IAFS,CAAjB;AAGA,eAAOC,UAAU,GAAG,OAAOA,UAAP,GAAoB,IAAvB,GAA8B,IAA/C;AACD;;AAED,aAAOI,MAAM,CAACb,KAAD,CAAb;;AAEF;AACE,aAAOa,MAAM,CAACb,KAAD,CAAb;AAxBJ;AA0BD","sourcesContent":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Used to print values in error messages.\n */\nexport default function inspect(value) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value) {\n        if (typeof value.inspect === 'function') {\n          return value.inspect();\n        } else if (Array.isArray(value)) {\n          return '[' + value.map(inspect).join(', ') + ']';\n        }\n\n        var properties = Object.keys(value).map(function (k) {\n          return \"\".concat(k, \": \").concat(inspect(value[k]));\n        }).join(', ');\n        return properties ? '{ ' + properties + ' }' : '{}';\n      }\n\n      return String(value);\n\n    default:\n      return String(value);\n  }\n}"]},"metadata":{},"sourceType":"module"}