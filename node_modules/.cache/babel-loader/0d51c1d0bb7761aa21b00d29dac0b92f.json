{"ast":null,"code":"import { STORE, UPDATE, DELETE } from \"../store/modelActionTypes\";\nimport { RestDataSource } from \"./RestDataSource\";\nimport { PRODUCTS, SUPPLIERS } from \"../store/dataTypes\";\nexport const GET_DATA = \"rest_get_data\";\nexport const getData = dataType => {\n  return {\n    type: GET_DATA,\n    dataType: dataType\n  };\n};\nexport const createRestMiddleware = (productsURL, suppliersURL) => {\n  const dataSources = {\n    [PRODUCTS]: new RestDataSource(productsURL, () => {}),\n    [SUPPLIERS]: new RestDataSource(suppliersURL, () => {})\n  };\n  return ({\n    dispatch,\n    getState\n  }) => next => action => {\n    switch (action.type) {\n      case GET_DATA:\n        if (getState().modelData[action.dataType].length === 0) {\n          dataSources[action.dataType].GetData(data => data.forEach(item => next({\n            type: STORE,\n            dataType: action.dataType,\n            payload: item\n          })));\n        }\n\n        break;\n\n      case STORE:\n        action.payload.id = null;\n        dataSources[action.dataType].Store(action.payload, data => next({ ...action,\n          payload: data\n        }));\n        break;\n\n      case UPDATE:\n        dataSources[action.dataType].Update(action.payload, data => next({ ...action,\n          payload: data\n        }));\n        break;\n\n      case DELETE:\n        dataSources[action.dataType].Delete({\n          id: action.payload\n        }, () => next(action));\n        break;\n\n      default:\n        next(action);\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/K. C. Fike/Desktop/github/productapp/src/webservice/RestMiddleware.js"],"names":["STORE","UPDATE","DELETE","RestDataSource","PRODUCTS","SUPPLIERS","GET_DATA","getData","dataType","type","createRestMiddleware","productsURL","suppliersURL","dataSources","dispatch","getState","next","action","modelData","length","GetData","data","forEach","item","payload","id","Store","Update","Delete"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,MAAhB,EAAwBC,MAAxB,QAAqC,2BAArC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,oBAApC;AAEA,OAAO,MAAMC,QAAQ,GAAG,eAAjB;AAEP,OAAO,MAAMC,OAAO,GAAIC,QAAD,IAAc;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAEH,QADH;AAEHE,IAAAA,QAAQ,EAAEA;AAFP,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,oBAAoB,GAAG,CAACC,WAAD,EAAcC,YAAd,KAA+B;AAE/D,QAAMC,WAAW,GAAG;AAChB,KAACT,QAAD,GAAY,IAAID,cAAJ,CAAmBQ,WAAnB,EAAgC,MAAM,CAAE,CAAxC,CADI;AAEhB,KAACN,SAAD,GAAa,IAAIF,cAAJ,CAAmBS,YAAnB,EAAiC,MAAM,CAAE,CAAzC;AAFG,GAApB;AAKA,SAAO,CAAC;AAACE,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAD,KAA0BC,IAAI,IAAIC,MAAM,IAAI;AAC/C,YAAQA,MAAM,CAACR,IAAf;AACI,WAAKH,QAAL;AACI,YAAIS,QAAQ,GAAGG,SAAX,CAAqBD,MAAM,CAACT,QAA5B,EAAsCW,MAAtC,KAAiD,CAArD,EAAwD;AACpDN,UAAAA,WAAW,CAACI,MAAM,CAACT,QAAR,CAAX,CAA6BY,OAA7B,CAAsCC,IAAD,IACjCA,IAAI,CAACC,OAAL,CAAaC,IAAI,IAAIP,IAAI,CAAC;AAAEP,YAAAA,IAAI,EAAET,KAAR;AACtBQ,YAAAA,QAAQ,EAAES,MAAM,CAACT,QADK;AACKgB,YAAAA,OAAO,EAAED;AADd,WAAD,CAAzB,CADJ;AAGH;;AACD;;AACJ,WAAKvB,KAAL;AACIiB,QAAAA,MAAM,CAACO,OAAP,CAAeC,EAAf,GAAoB,IAApB;AACAZ,QAAAA,WAAW,CAACI,MAAM,CAACT,QAAR,CAAX,CAA6BkB,KAA7B,CAAmCT,MAAM,CAACO,OAA1C,EAAmDH,IAAI,IACnDL,IAAI,CAAC,EAAE,GAAGC,MAAL;AAAaO,UAAAA,OAAO,EAAEH;AAAtB,SAAD,CADR;AAEA;;AACJ,WAAKpB,MAAL;AACIY,QAAAA,WAAW,CAACI,MAAM,CAACT,QAAR,CAAX,CAA6BmB,MAA7B,CAAoCV,MAAM,CAACO,OAA3C,EAAoDH,IAAI,IACnDL,IAAI,CAAC,EAAE,GAAGC,MAAL;AAAaO,UAAAA,OAAO,EAAEH;AAAtB,SAAD,CADT;AAEA;;AACJ,WAAKnB,MAAL;AACIW,QAAAA,WAAW,CAACI,MAAM,CAACT,QAAR,CAAX,CAA6BoB,MAA7B,CAAoC;AAACH,UAAAA,EAAE,EAAER,MAAM,CAACO;AAAZ,SAApC,EACI,MAAMR,IAAI,CAACC,MAAD,CADd;AAEA;;AACJ;AACID,QAAAA,IAAI,CAACC,MAAD,CAAJ;AAtBR;AAwBH,GAzBD;AA0BH,CAjCM","sourcesContent":["import { STORE, UPDATE, DELETE} from \"../store/modelActionTypes\";\nimport { RestDataSource } from \"./RestDataSource\";\nimport { PRODUCTS, SUPPLIERS } from \"../store/dataTypes\";\n\nexport const GET_DATA = \"rest_get_data\";\n\nexport const getData = (dataType) => {\n    return {\n        type: GET_DATA,\n        dataType: dataType\n    }\n}\n\nexport const createRestMiddleware = (productsURL, suppliersURL) => {\n\n    const dataSources = {\n        [PRODUCTS]: new RestDataSource(productsURL, () => {}),\n        [SUPPLIERS]: new RestDataSource(suppliersURL, () => {})\n    }\n    \n    return ({dispatch, getState}) => next => action => {\n        switch (action.type) {\n            case GET_DATA:\n                if (getState().modelData[action.dataType].length === 0) {\n                    dataSources[action.dataType].GetData((data) => \n                        data.forEach(item => next({ type: STORE, \n                            dataType: action.dataType, payload: item})));\n                }\n                break;\n            case STORE:\n                action.payload.id = null;\n                dataSources[action.dataType].Store(action.payload, data => \n                    next({ ...action, payload: data }))\n                break;\n            case UPDATE:          \n                dataSources[action.dataType].Update(action.payload, data => \n                     next({ ...action, payload: data }))            \n                break;\n            case DELETE:\n                dataSources[action.dataType].Delete({id: action.payload }, \n                    () => next(action));\n                break;\n            default:\n                next(action);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}